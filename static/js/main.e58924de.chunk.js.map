{"version":3,"sources":["components/cell/Cell.js","components/gridRow/GridRow.js","utils/getEmptyGrid.js","utils/calculateNewGrid.js","App.js","index.js"],"names":["Cell","props","onClick","cellClicked","style","width","height","background","isAlive","border","boxSizing","GridRow","display","children","getEmptyGrid","grid","i","j","deepCopy","arr","copy","forEach","elem","Array","isArray","push","App","useState","setGrid","count","setCount","runLoop","setRunLoop","startRunLoop","c","prevGrid","newGrid","neighboursAlive","calculateNewGrid","handleStopClick","clearInterval","alignItems","justifyContent","flexFlow","padding","gap","setInterval","map","gridRow","indexRow","cell","indexCell","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e58924de.chunk.js","sourcesContent":["export function Cell(props) {\r\n    return <div onClick={props.cellClicked} style={{\r\n        width: '20px',\r\n        height: '20px', \r\n        background: props.isAlive ? 'gray' : 'white',\r\n        border: '0.1px solid lightgray',\r\n        boxSizing: 'border-box'\r\n    }}/>\r\n}","export function GridRow(props) {\r\n    return <div style={{ display: 'flex' }}>{props.children}</div>\r\n}","export function getEmptyGrid(width, height) {\r\n    const grid = [];\r\n  \r\n    for (let i = 0; i < width; i++) {\r\n      grid[i] = [];\r\n      for (let j = 0; j < height; j++) {\r\n        grid[i][j] = 0;\r\n      }\r\n    }\r\n    \r\n    return grid;\r\n  }","export function calculateNewGrid(width, height, grid) {\r\n    const newGrid = deepCopy(grid);\r\n      for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < height; j++) {\r\n          const isAlive = grid[i][j] === 1;\r\n          let neighboursAlive = 0;\r\n          if (i - 1 > 0 && j - 1 > 0 && grid[i - 1][j - 1] === 1) neighboursAlive++;\r\n          if (i - 1 > 0 && grid[i - 1][j] === 1) neighboursAlive++;\r\n          if (i - 1 > 0 && j + 1 < height && grid[i - 1][j + 1] === 1) neighboursAlive++;\r\n          if (j - 1 > 0 && grid[i][j - 1] === 1) neighboursAlive++;\r\n          if (j + 1 < height && grid[i][j + 1] === 1) neighboursAlive++;\r\n          if (i + 1 < width && j - 1 > 0 && grid[i + 1][j - 1] === 1) neighboursAlive++;\r\n          if (i + 1 < width && grid[i + 1][j] === 1) neighboursAlive++;\r\n          if (i + 1 < width && j + 1 < height && grid[i + 1][j + 1] === 1) neighboursAlive++;\r\n          \r\n          // 1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\r\n          // 3. Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n          if (isAlive && (neighboursAlive < 2 || neighboursAlive > 3)) newGrid[i][j] = 0;\r\n\r\n          // 2. Any live cell with two or three live neighbours lives on to the next generation.\r\n          // if (isAlive && (neighboursAlive === 2 || neighboursAlive === 3))\r\n\r\n          // 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n          if (!isAlive && neighboursAlive === 3) newGrid[i][j] = 1;\r\n        }\r\n      }\r\n      return newGrid;\r\n}\r\n\r\nconst deepCopy = (arr) => {\r\n    let copy = [];\r\n    arr.forEach(elem => {\r\n        if (Array.isArray(elem)) {\r\n            copy.push(deepCopy(elem))\r\n        } else {\r\n            copy.push(elem)\r\n        }\r\n    })\r\n    return copy;\r\n}","import { useState } from 'react';\nimport './App.css';\nimport { Cell } from './components/cell/Cell';\nimport { GridRow } from './components/gridRow/GridRow';\nimport { getEmptyGrid } from './utils/getEmptyGrid';\nimport { calculateNewGrid } from './utils/calculateNewGrid';\n\nconst WIDTH = 40;\nconst HEIGHT = 50;\n\nexport function App() {\n  const [grid, setGrid] = useState(getEmptyGrid(WIDTH, HEIGHT));\n  const [count, setCount] = useState(0);\n  const [runLoop, setRunLoop] = useState(null);\n\n  function startRunLoop() {\n    setCount((c) => c + 1)\n    setGrid(prevGrid => calculateNewGrid(WIDTH, HEIGHT, prevGrid));\n  }\n\n  function handleStartClick() {\n    if (!runLoop) {\n      setRunLoop(setInterval(startRunLoop, 100));\n    }\n  }\n\n  const handleResetClick = () => {\n    setGrid(getEmptyGrid(WIDTH, HEIGHT));\n    handleStopClick();\n    setCount(0);\n  }\n\n  const handleStopClick = () => {\n    clearInterval(runLoop);\n    setRunLoop(null);\n  }\n\n  return <div style={{ display: 'flex', height: '100vh', alignItems: 'center', justifyContent: 'center', flexFlow: 'column' }}>\n    <div style={{ display: 'flex', padding: '10px', gap: '20px' }}> \n      <button \n        onClick={handleStartClick}\n      >\n        Start\n      </button>\n      <button \n        onClick={handleStopClick}>\n        Stop\n      </button>\n      <button\n        onClick={handleResetClick}\n      >\n        Reset\n      </button>\n      {count}\n    </div>\n    <div>\n      {grid.map((gridRow, indexRow) => {\n        return <GridRow key={indexRow}>\n          {gridRow.map((cell, indexCell) => {\n            return <Cell\n              key={indexRow + indexCell}\n              isAlive={cell}\n              cellClicked={() => {\n                const newGrid = [...grid];\n                newGrid[indexRow][indexCell] = cell ? 0 : 1;\n                setGrid(newGrid);\n              }} />\n          })}\n        </GridRow>\n      })}\n    </div>\n  </div>;\n\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}