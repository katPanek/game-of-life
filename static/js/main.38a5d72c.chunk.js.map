{"version":3,"sources":["components/cell/Cell.js","components/gridRow/GridRow.js","App.js","index.js"],"names":["Cell","props","onClick","cellClicked","style","width","height","background","isAlive","border","boxSizing","GridRow","display","children","App","useState","getEmptyGrid","grid","setGrid","count","setCount","runLoop","setRunLoop","startRunLoop","c","newGrid","deepCopy","i","j","neighboursAlive","handleStopClick","clearInterval","alignItems","justifyContent","flexFlow","padding","gap","setInterval","map","gridRow","indexRow","cell","indexCell","arr","copy","forEach","elem","Array","isArray","push","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAO,SAASA,EAAKC,GACjB,OAAO,qBAAKC,QAASD,EAAME,YAAaC,MAAO,CAC3CC,MAAO,OACPC,OAAQ,OACRC,WAAYN,EAAMO,QAAU,OAAS,QACrCC,OAAQ,wBACRC,UAAW,gBCNZ,SAASC,EAAQV,GACpB,OAAO,qBAAKG,MAAO,CAAEQ,QAAS,QAAvB,SAAkCX,EAAMY,WCO5C,SAASC,IACd,MAAwBC,mBAASC,KAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BH,mBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA8BL,mBAAS,MAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAEA,SAASC,IACPH,GAAS,SAACI,GAAD,OAAOA,EAAI,KACpBN,GAAQ,SAAAD,GAEN,IADA,IAAMQ,EAAUC,EAAST,GAChBU,EAAI,EAAGA,EAZR,GAYmBA,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAZT,GAYqBA,IAAK,CAC/B,IAAMpB,EAAyB,IAAfS,EAAKU,GAAGC,GACpBC,EAAkB,EAClBF,EAAI,EAAI,GAAKC,EAAI,EAAI,GAA4B,IAAvBX,EAAKU,EAAI,GAAGC,EAAI,IAAUC,IACpDF,EAAI,EAAI,GAAwB,IAAnBV,EAAKU,EAAI,GAAGC,IAAUC,IACnCF,EAAI,EAAI,GAAKC,EAAI,EAjBhB,IAiBqD,IAAvBX,EAAKU,EAAI,GAAGC,EAAI,IAAUC,IACzDD,EAAI,EAAI,GAAwB,IAAnBX,EAAKU,GAAGC,EAAI,IAAUC,IACnCD,EAAI,EAnBH,IAmBoC,IAAnBX,EAAKU,GAAGC,EAAI,IAAUC,IACxCF,EAAI,EArBJ,IAqBiBC,EAAI,EAAI,GAA4B,IAAvBX,EAAKU,EAAI,GAAGC,EAAI,IAAUC,IACxDF,EAAI,EAtBJ,IAsBoC,IAAnBV,EAAKU,EAAI,GAAGC,IAAUC,IACvCF,EAAI,EAvBJ,IAuBiBC,EAAI,EAtBpB,IAsByD,IAAvBX,EAAKU,EAAI,GAAGC,EAAI,IAAUC,IAI7DrB,IAAYqB,EAAkB,GAAKA,EAAkB,KAAIJ,EAAQE,GAAGC,GAAK,GAMxEpB,GAA+B,IAApBqB,IAAuBJ,EAAQE,GAAGC,GAAK,GAG3D,OAAOH,KAUX,IAMMK,EAAkB,WACtBC,cAAcV,GACdC,EAAW,OAGb,OAAO,sBAAKlB,MAAO,CAAEQ,QAAS,OAAQN,OAAQ,QAAS0B,WAAY,SAAUC,eAAgB,SAAUC,SAAU,UAA1G,UACL,sBAAK9B,MAAO,CAAEQ,QAAS,OAAQuB,QAAS,OAAQC,IAAK,QAArD,UACE,wBACElC,QApBN,WACOmB,GACHC,EAAWe,YAAYd,EAAc,OAiBrC,mBAKA,wBACErB,QAAS4B,EADX,kBAIA,wBACE5B,QAvBmB,WACvBgB,EAAQF,KACRc,IACAV,EAAS,IAmBP,mBAKCD,KAEH,8BACGF,EAAKqB,KAAI,SAACC,EAASC,GAClB,OAAO,cAAC7B,EAAD,UACJ4B,EAAQD,KAAI,SAACG,EAAMC,GAClB,OAAO,cAAC1C,EAAD,CAELQ,QAASiC,EACTtC,YAAa,WACX,IAAMsB,EAAO,YAAOR,GACpBQ,EAAQe,GAAUE,GAAaD,EAAO,EAAI,EAC1CvB,EAAQO,KALLe,EAAWE,OAHDF,WAkB7B,SAASxB,IAGP,IAFA,IAAMC,EAAO,GAEJU,EAAI,EAAGA,EAlGJ,GAkGeA,IAAK,CAC9BV,EAAKU,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAnGL,GAmGiBA,IAC1BX,EAAKU,GAAGC,GAAK,EAIjB,OAAOX,EAGT,IAAMS,EAAW,SAAXA,EAAYiB,GAChB,IAAIC,EAAO,GAQX,OAPAD,EAAIE,SAAQ,SAAAC,GACNC,MAAMC,QAAQF,GAChBF,EAAKK,KAAKvB,EAASoB,IAEnBF,EAAKK,KAAKH,MAGPF,GCrHTM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.38a5d72c.chunk.js","sourcesContent":["export function Cell(props) {\r\n    return <div onClick={props.cellClicked} style={{\r\n        width: '20px',\r\n        height: '20px', \r\n        background: props.isAlive ? 'gray' : 'white',\r\n        border: '0.1px solid lightgray',\r\n        boxSizing: 'border-box'\r\n    }}/>\r\n}","export function GridRow(props) {\r\n    return <div style={{ display: 'flex' }}>{props.children}</div>\r\n}","import { useState } from 'react';\nimport './App.css';\nimport { Cell } from './components/cell/Cell';\nimport { GridRow } from './components/gridRow/GridRow';\n\nconst WIDTH = 40;\nconst HEIGHT = 50;\n\nexport function App() {\n  const [grid, setGrid] = useState(getEmptyGrid());\n  const [count, setCount] = useState(0);\n  const [runLoop, setRunLoop] = useState(null);\n\n  function startRunLoop() {\n    setCount((c) => c + 1)\n    setGrid(grid => {\n      const newGrid = deepCopy(grid);\n      for (let i = 0; i < WIDTH; i++) {\n        for (let j = 0; j < HEIGHT; j++) {\n          const isAlive = grid[i][j] === 1;\n          let neighboursAlive = 0;\n          if (i - 1 > 0 && j - 1 > 0 && grid[i - 1][j - 1] === 1) neighboursAlive++;\n          if (i - 1 > 0 && grid[i - 1][j] === 1) neighboursAlive++;\n          if (i - 1 > 0 && j + 1 < HEIGHT && grid[i - 1][j + 1] === 1) neighboursAlive++;\n          if (j - 1 > 0 && grid[i][j - 1] === 1) neighboursAlive++;\n          if (j + 1 < HEIGHT && grid[i][j + 1] === 1) neighboursAlive++;\n          if (i + 1 < WIDTH && j - 1 > 0 && grid[i + 1][j - 1] === 1) neighboursAlive++;\n          if (i + 1 < WIDTH && grid[i + 1][j] === 1) neighboursAlive++;\n          if (i + 1 < WIDTH && j + 1 < HEIGHT && grid[i + 1][j + 1] === 1) neighboursAlive++;\n          \n          // 1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n          // 3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n          if (isAlive && (neighboursAlive < 2 || neighboursAlive > 3)) newGrid[i][j] = 0;\n\n          // 2. Any live cell with two or three live neighbours lives on to the next generation.\n          // if (isAlive && (neighboursAlive === 2 || neighboursAlive === 3))\n\n          // 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n          if (!isAlive && neighboursAlive === 3) newGrid[i][j] = 1;\n        }\n      }\n      return newGrid;\n  });\n  }\n\n  function handleStartClick() {\n    if (!runLoop) {\n      setRunLoop(setInterval(startRunLoop, 100));\n    }\n  }\n\n  const handleResetClick = () => {\n    setGrid(getEmptyGrid());\n    handleStopClick();\n    setCount(0);\n  }\n\n  const handleStopClick = () => {\n    clearInterval(runLoop);\n    setRunLoop(null);\n  }\n\n  return <div style={{ display: 'flex', height: '100vh', alignItems: 'center', justifyContent: 'center', flexFlow: 'column' }}>\n    <div style={{ display: 'flex', padding: '10px', gap: '20px' }}> \n      <button \n        onClick={handleStartClick}\n      >\n        Start\n      </button>\n      <button \n        onClick={handleStopClick}>\n        Stop\n      </button>\n      <button\n        onClick={handleResetClick}\n      >\n        Reset\n      </button>\n      {count}\n    </div>\n    <div>\n      {grid.map((gridRow, indexRow) => {\n        return <GridRow key={indexRow}>\n          {gridRow.map((cell, indexCell) => {\n            return <Cell\n              key={indexRow + indexCell}\n              isAlive={cell}\n              cellClicked={() => {\n                const newGrid = [...grid];\n                newGrid[indexRow][indexCell] = cell ? 0 : 1;\n                setGrid(newGrid);\n              }} />\n          })}\n        </GridRow>\n      })}\n    </div>\n  </div>;\n\n}\n\nfunction getEmptyGrid() {\n  const grid = [];\n\n  for (let i = 0; i < WIDTH; i++) {\n    grid[i] = [];\n    for (let j = 0; j < HEIGHT; j++) {\n      grid[i][j] = 0;\n    }\n  }\n  \n  return grid;\n}\n\nconst deepCopy = (arr) => {\n  let copy = [];\n  arr.forEach(elem => {\n    if (Array.isArray(elem)) {\n      copy.push(deepCopy(elem))\n    } else {\n      copy.push(elem)\n    }\n  })\n  return copy;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}